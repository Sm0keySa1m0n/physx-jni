/****************************************
 * [package=extensions]
 ****************************************/

[Prefix="physx::"]
interface PxCollectionExt {
    static void releaseObjects([Ref] PxCollection collection, optional boolean releaseExclusiveShapes);
    static void remove([Ref] PxCollection collection, unsigned short concreteType, optional PxCollection to);
    //static PxCollection createCollection([Ref] PxPhysics physics);    // clashes with createCollection(scene)
    static PxCollection createCollection([Ref] PxScene scene);
};

[Prefix="physx::"]
interface PxDefaultMemoryInputData {
    void PxDefaultMemoryInputData([Ref] PxU8Ptr data, unsigned long length);
    unsigned long read(VoidPtr dest, unsigned long count);
    unsigned long getLength();
    void seek(unsigned long pos);
    unsigned long tell();
};
PxDefaultMemoryInputData implements PxInputData;

[Prefix="physx::"]
interface PxDefaultMemoryOutputStream {
    void PxDefaultMemoryOutputStream();
    void write(VoidPtr src, unsigned long count);
    unsigned long getSize();
    VoidPtr getData();
};
PxDefaultMemoryOutputStream implements PxOutputStream;

[Prefix="physx::"]
interface PxMassProperties {
    void PxMassProperties();
    void PxMassProperties(float m, [Const, Ref] PxMat33 inertiaT, [Const, Ref] PxVec3 com);
    void PxMassProperties([Const, Ref] PxGeometry geometry);
    void translate([Const, Ref] PxVec3 t);
    [Value] static PxVec3 getMassSpaceInertia([Const, Ref] PxMat33 inertia, [Ref] PxQuat massFrame);
    [Value] static PxMat33 translateInertia([Const, Ref] PxMat33 inertia, float mass, [Const, Ref] PxVec3 t);
    [Value] static PxMat33 rotateInertia([Const, Ref] PxMat33 inertia, [Const, Ref] PxQuat q);
    [Value] static PxMat33 scaleInertia([Const, Ref] PxMat33 inertia, [Const, Ref] PxQuat scaleRotation, [Const, Ref] PxVec3 scale);
    [Value] static PxMassProperties sum([Const] PxMassProperties props, [Const] PxTransform transforms, unsigned long count);
    [Value] attribute PxMat33 inertiaTensor;
    [Value] attribute PxVec3 centerOfMass;
    attribute float mass;
};

[Prefix="physx::"]
interface PxMeshOverlapUtil {
    void PxMeshOverlapUtil();
    unsigned long findOverlap([Const, Ref] PxGeometry geom, [Const, Ref] PxTransform geomPose, [Const, Ref] PxTriangleMeshGeometry meshGeom, [Const, Ref] PxTransform meshPose);
    [Value] PxU32ConstPtr getResults();
    unsigned long getNbResults();
};

[Prefix="physx::"]
interface PxRigidActorExt {
    static PxShape createExclusiveShape([Ref] PxRigidActor actor, [Const, Ref] PxGeometry geometry, [Const, Ref] PxMaterial material, [Ref] optional PxShapeFlags flags);
};

[Prefix="physx::"]
interface PxRigidBodyExt {
    //static boolean updateMassAndInertia([Ref] PxRigidBody body, [Ref] PxRealPtr shapeDensities, unsigned long shapeDensityCount, optional PxVec3 massLocalPose, optional boolean includeNonSimShapes);
    static boolean updateMassAndInertia([Ref] PxRigidBody body, float density, optional PxVec3 massLocalPose, optional boolean includeNonSimShapes);
    //static boolean setMassAndUpdateInertia([Ref] PxRigidBody body, [Ref] PxRealPtr shapeMasses, unsigned long shapeMassCount, optional PxVec3 massLocalPose, optional boolean includeNonSimShapes);
    static boolean setMassAndUpdateInertia([Ref] PxRigidBody body, float mass, optional PxVec3 massLocalPose, optional boolean includeNonSimShapes);

    static void addForceAtPos([Ref] PxRigidBody body, [Const, Ref] PxVec3 force, [Const, Ref] PxVec3 pos, optional PxForceModeEnum mode, optional boolean wakeup);
    static void addForceAtLocalPos([Ref] PxRigidBody body, [Const, Ref] PxVec3 force, [Const, Ref] PxVec3 pos, optional PxForceModeEnum mode, optional boolean wakeup);
    static void addLocalForceAtPos([Ref] PxRigidBody body, [Const, Ref] PxVec3 force, [Const, Ref] PxVec3 pos, optional PxForceModeEnum mode, optional boolean wakeup);
    static void addLocalForceAtLocalPos([Ref] PxRigidBody body, [Const, Ref] PxVec3 force, [Const, Ref] PxVec3 pos, optional PxForceModeEnum mode, optional boolean wakeup);

    [Value] static PxVec3 getVelocityAtPos([Const, Ref] PxRigidBody body, [Const, Ref] PxVec3 pos);
    [Value] static PxVec3 getLocalVelocityAtLocalPos([Const, Ref] PxRigidBody body, [Const, Ref] PxVec3 pos);
    [Value] static PxVec3 getVelocityAtOffset([Const, Ref] PxRigidBody body, [Const, Ref] PxVec3 pos);

    static void computeVelocityDeltaFromImpulse([Const, Ref] PxRigidBody body, [Const, Ref] PxVec3 impulsiveForce,
                [Const, Ref] PxVec3 impulsiveTorque, [Ref] PxVec3 deltaLinearVelocity, [Ref] PxVec3 deltaAngularVelocity);
    static void computeVelocityDeltaFromImpulse([Const, Ref] PxRigidBody body, [Const, Ref] PxTransform globalPose, [Const, Ref] PxVec3 point,
                [Const, Ref] PxVec3 impulse, float invMassScale, float invInertiaScale,
                [Ref] PxVec3 deltaLinearVelocity, [Ref] PxVec3 deltaAngularVelocity);
    static void computeLinearAngularImpulse([Const, Ref] PxRigidBody body, [Const, Ref] PxTransform globalPose, [Const, Ref] PxVec3 point,
                [Const, Ref] PxVec3 impulse, float invMassScale, float invInertiaScale,
                [Ref] PxVec3 linearImpulse, [Ref] PxVec3 angularImpulse);
};

[Prefix="physx::"]
interface PxSerialization {
    static boolean isSerializable([Ref] PxCollection collection, [Ref] PxSerializationRegistry sr, [Const] optional PxCollection externalReferences);
    static void complete([Ref] PxCollection collection, [Ref] PxSerializationRegistry sr, [Const] optional PxCollection exceptFor, optional boolean followJoints);
    static void createSerialObjectIds([Ref] PxCollection collection, unsigned long long base);
    static PxCollection createCollectionFromXml([Ref] PxInputData inputData, [Ref] PxCooking cooking, [Ref] PxSerializationRegistry sr, [Const] optional PxCollection externalRefs);
    static PxCollection createCollectionFromBinary(VoidPtr memBlock, [Ref] PxSerializationRegistry sr, [Const] optional PxCollection externalRefs);
    static boolean serializeCollectionToXml([Ref] PxOutputStream outputStream, [Ref] PxCollection collection, [Ref] PxSerializationRegistry sr, optional PxCooking cooking, [Const] optional PxCollection externalRefs);
    static boolean serializeCollectionToBinary([Ref] PxOutputStream outputStream, [Ref] PxCollection collection, [Ref] PxSerializationRegistry sr, [Const] optional PxCollection externalRefs, optional boolean exportNames);
    static PxSerializationRegistry createSerializationRegistry([Ref] PxPhysics physics);
};

[Prefix="physx::", NoDelete]
interface PxSerializationRegistry {
    void release();
};
